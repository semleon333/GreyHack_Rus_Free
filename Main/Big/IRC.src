//main.lib  pressed
tab=char(9);endl=char(10);quote=char(34);colEND="</color>";colFFF="<color=#fff>";colF22="<color=#f22>";col2F2="<color=#2f2>";col22F="<color=#22f>";colFF2="<color=#ff2>";col2FF="<color=#2ff>";colF2F="<color=#f2f>";SHELL = get_shell;HOST = get_shell.host_computer;FILE_ROOT = get_shell.host_computer.File("/");CURRENT_PATH=current_path;ERR_PRINT=function(s,fg=0);print("<color=#F22><b> ERROR: </b></color>"+s+colFF2+" time: "+colFFF+str(time));if fg then return str else return 0;end function;ERR_FATAL=function(s);exit("<color=#F22><b> ERROR_FATAL: </b></color>"+s);end function;ERR_STRING=function(s);return("<color=#F22><b> ERROR: </b></color>"+s);end function;cs=function(string);clear_screen;if string then print(string);end function;col=function(color,s);return "<color=#"+color+">"+s;end function;mark=function(color,s);return "<mark=#"+color+">"+s;end function;dbg=function(str);if flag_dbg then print("<color=#AAA><b>Debug:</b> <color=#FFF>"+str+"</color>");end function;file2root=function(f);if typeof(f)!="file" then return ERR_PRINT(colFF2+"file2root:"+colFFF+" type of "+colFF2+f+colFFF+" is "+colFF2+typeof(f));while f.path!="/";f=f.parent;end while;return f;end function;list_s2int=function(list,strong=0);rv=[];while list.len>0;tmp=list.pull.to_int;if strong and typeof(tmp)!="number" then continue;rv.push(tmp);end while;return rv;end function;prmExist=function(s);if s[1]=="-" then;for param in params;if param.lower==s.lower then return true;end for;return false;else;if s.len>2 then ERR_PRINT("wrong format: "+s);s=s[1:];for param in params;if param[0]!="-" or param.len<2 or param[1]=="-" then continue;for ch in param;if ch.lower==s.lower then return true;end for;end for;return false;end function;prmTake=function(s);substr=function(subs);for ch in subs;if ch.lower==s.lower then return true;end for;return false;end function;if s[1]=="-" then;for param in params;if param.lower==s.lower then;params.remove(params.indexOf(s));return true;end if;end for;return false;else;if s.len>2 then ERR_PRINT("wrong format: "+s);s=s[1:];for param in params;if param[0]!="-" or param.len<2 or param[1]=="-" then continue;if substr(param) then;indx=params.indexOf(param);globals.params[indx]=params[indx].remove(s);if params[indx].len<2 then params.remove(indx);return true;end if;end for;return false;end function;prmTakeIp=function();for i in range(0,params.len-1);s=params[i];if not is_valid_ip(s) then continue;params.remove(i);return s;end for;return 0;end function;fill=function(s, ln, side="s+", filler=" ");s=str(s);if s.len >= ln then return s;filler=filler*ln;if side=="s+" then return (s+filler)[:ln];if side=="+s" then return (filler+s)[-ln:];end function;form=function(list);rv="";for l in list;if typeof(l)=="string" then;rv=rv+l;continue;end if;p0=l[0];if l.len>1 then;p1=l[1];else;rv=rv+p0;continue;end if;if l.len>2 then;p2=l[2];else;rv=rv+fill(p0,p1);continue;end if;if l.len>3 then;p3=l[3];else;rv=rv+fill(p0,p1,p2);continue;end if;rv=rv+fill(p0,p1,p2,p3);end for;return rv;end function;connF=function(shell, ip, pass, port=22, username="root", type="ssh");dbg("connF");if not (shell or ip or pass) then ERR_PRINT("connF: need more params");temp=shell.connect_service(ip.trim, port, username.trim, pass.trim , type.trim);if not temp then ERR_PRINT("connF: Not connected: "+temp);return temp;end function;connChain=function(shellList, oldShell);if not oldShell then oldShell=get_shell;for i in range (0, SERVER_LIST.len-1, 2);newShell=connF(oldShell,shellList[i], shellList[i+1]);if not newShell then ERR_FATAL("Connection failed");oldShell=newShell;end for;return newShell;end function;choose=function(choices, default=-1);if not choices then ERR_PRINT("no choices!");for i in range(0,choices.len-1);if i==0 then;print("<color=#ff2><b>"+choices[i]+"</b>");else;print("<color=#ff2><b>["+fill(i+"]", 4)+"</b><color=#fff>"+choices[i]);end if;end for;prompt="> ";if default>-1 then prompt="[default="+default+"] > ";while 1;uc=user_input("<color=#ff2>"+prompt+"<color=#fff>");if uc.len==0 then;if default>-1 then return [default];continue;end if;uc=uc.split(" ");uc=list_s2int(uc,1);misses=[];rv=[];for i in uc;if typeof(i)=="number" then;if i>0 and i<choices.len then rv.push(i) else misses.push(i);else;misses.push(i);end if;end for;if misses.len>0 then print("<color=#ff2>Not a valid choices: "+misses.join(" "));if rv.len>0 then return rv;end while;end function;chooseYesNo=function(default, prompt="");if prompt.len>0 then print("<b>"+prompt+"</b>");if default then;prompt="<color=#fff>y/n [Enter = Yes] <color=#ff2>> <color=#fff>";else;prompt="<color=#fff>y/n [Enter = No] <color=#ff2>> <color=#fff>";end if;while 1;resp=user_input(prompt);if resp.len==0 then return default;if resp.lower[0]=="y"or resp.lower[0]=="н" then return true;if resp.lower[0]=="n"or resp.lower[0]=="т" then return false;end while;end function;includeLib=function(libName);paths=[CURRENT_PATH, "/lib", "/root", "/home/guest", "/bin", "/usr/bin"];for i in paths;lib=include_lib(i+"/"+libName);if lib then return lib;end for;ERR_PRINT("Library not found: "+libName);return false;end function
//end main.lib
//inlude  deep
includeLib=function();grabLibs=function(dir);X=[];C=[];for f in dir.get_files;lib=include_lib(f.path);if lib then;if typeof(lib)=="MetaxploitLib" then X.push(f);if typeof(lib)=="cryptoLib" then C.push(lib);end if;end for;for f in dir.get_folders;tmp=grabLibs(f);X=tmp[0]+X;C=tmp[1]+C;end for;return [X,C];end function;listOfLibs=grabLibs(get_shell.host_computer.File("/"));Xlist=listOfLibs[0];Clist=listOfLibs[1];if Clist.len>0 then globals.LibC=Clist[0] else ERR_PRINT("Crypto lib not found");if Xlist.len==0 then;globals.LibX=null;return ERR_PRINT("Metaxploit lib not found");end if;LibX=null;for file in Xlist;if not file then continue;if not LibX then;LibX=include_lib(file.path);lvl1=list_s2int(LibX.load(file.path).version.split("."));continue;end if;lib=LibX.load(file.path);lvl2=list_s2int(lib.version.split("."));for i in [0,1,2];if lvl1[i]<lvl2[i] then;lvl1=lvl2;LibX=include_lib(file.path);break;end if;end for;end for;globals.LibX=LibX;if not LibX then return ERR_PRINT("Metaxploit lib not found");return;end function
//тестовые кастомные функции
//все они начинаются с cus для того что бы выдавались в подсказке при печати
cusInput=function(s,fg=0);if fg then fg=1;if s[-1]==" " then s=s[:-1]+"<color=#0000>x";return user_input(colFF2+"<mark=#ffff0020>"+s+colFFF+"<mark=#ffffff20>",fg);end function
//cus*
cusInput=function(s,fg=0);if fg then fg=1;if s[-1]==" " then s=s[:-1]+"<color=#0000>x";return user_input(colFF2+"<mark=#ffff0020>"+s+colFFF+"<mark=#ffffff20>",fg);end function;cusFile=function(p,f,sm=0);if not p then;ERR_PRINT("Void path");return 0;end if;if not f then f=get_shell.host_computer.File("/");f=file2root(f);if p.len>1 and p[:2]=="//" then p=p[1:];if p=="/" then return f;if parent_path(p)==p then p=CURRENT_PATH+"/"+p;if p[-1]=="/" then p=p[:-1];pl=p.split("/")[1:];while pl.len>1;i=pl.pull;for j in f.get_folders;if j.name==i then;f=j;break;end if;end for;if f.name!=i then;if not sm then ERR_PRINT(col("fff","Not found folder ")+col("ff2",i)+col("fff"," in folder: ")+col("ff2",f.path));return 0;end if;end while;for i in f.get_folders+f.get_files;if i.name==pl[0] then;f=i;break;end if;end for;if f.name!=pl[0] then;if not sm then ERR_PRINT(col("fff","Not found file/folder ")+col("ff2",pl[0])+col("fff"," in folder: ")+col("ff2",f.path));return 0;end if;return f;end function;cusRename=function(f,nn,sm=0);if not f then;ERR_PRINT("Void fileObj");return 0;end if;ff=f.parent;if not (ff and sm) then ERR_PRINT("file - ""/"" is not valid target to renaming!!!");rvl=f.rename(nn);if rvl.len>0 and not sm then return ERR_PRINT(rvl);for i in ff.get_files;if i.name==nn then return i;end for;return 0;end function;cusTouch=function(inputPath, compObj, ow=0, sm=0);if typeof(compObj)!="computer" then compObj=get_shell.host_computer;if typeof(inputPath)!="string" then return ERR_PRINT("Incorrect params: "+inputPath);if parent_path(inputPath)==inputPath then;targetPath=CURRENT_PATH;fileName=inputPath;else;targetPath=parent_path(inputPath);fileName=inputPath.split("/")[-1];end if;if targetPath[-1]!="/" then targetPath=targetPath+"/";if targetPath.len>1 and targetPath[-1]=="/" then targetPath=targetPath[:-1];file=cusFile(targetPath+"/"+fileName,compObj.File("/"),sm);if file then;if not (file.is_binary or ow) then return file;if ow then;if file.is_binary then;tmpName=str(rnd)[2:];compObj.touch(targetPath,tmpName);tmpFile=cusFile(targetPath+"/"+tmpName,compObj.File("/"),sm);tmpFile.move(targetPath,fileName);return cusFile(targetPath+"/"+fileName,compObj.File("/"),sm);else;tmp=file.set_content("");if tmp!=1 then return ERR_PRINT(tmp);return file;end if;end if;end if;tmp=compObj.touch(targetPath,fileName);if tmp!=1 then return ERR_PRINT(tmp);file=cusFile(targetPath+"/"+fileName,compObj.File("/"),sm);if file then return file;ERR_PRINT("Что-то пошло не так, если вы это видите - БЕГИТЕ");return file;end function;cusMove=function(f,np=CURRENT_PATH,sm=0);if typeof(f)!="file" then return ERR_PRINT(colFFF+"Move: Wrong file: "+f);f.move();end function
//

queue=function()

end function
read=function()
  chat=chatFile.get_content.split(endl)
  if chat.len>chatOnScreen.len then
    dbg(chat.len+" "+chatOnScreen.len)
    print(chat[chatOnScreen.len:].join(endl+colFFF))
  end if
  return chat
end function
write=function(input)
  chatFile.set_content(chatFile.get_content+endl+input)
end function


clear_screen
//---Var---//
flag_dbg=0

SERVER_LIST = [] //LIST OF "ip","SSHpass","ip","SSHpass"...

PROGRAM = {}
PROGRAM.NAME = "IRC"
PROGRAM.VERSION_S = "0.0.1"
NAME_VER = PROGRAM.NAME+" v"+PROGRAM.VERSION_S
programsStorDirOnServPath = "/programs/"+PROGRAM.NAME+"/"
VER_ON_SERV_PATH = programsStorDirOnServPath+"ver"
PROGRAM.CO_VER_PATH = programsStorDirOnServPath+"ver_co"
DBfolder=programsStorDirOnServPath+"DB/"

//---Init---//
//SERVER_SHELL = connChain(SERVER_LIST)
SERVER_SHELL=SHELL



chatFile=cusTouch(DBfolder+"ch0/chat",SERVER_SHELL.host_computer)
SERVER_SHELL.host_computer.create_folder(DBfolder+"ch0","queue")
queueDirFile=cusFile(DBfolder+"ch0/queue",SERVER_SHELL.host_computer.File("/"))
//chatOnScreen=chatFile.get_content.split(endl)
chatOnScreen=[]

//---Main---//

while 1

chatOnScreen=read()
input=user_input(colFF2+"> "+colFFF)
chatOnScreen=read()
if input then
  write(input)
  chatOnScreen=chatFile.get_content.split(endl)
end if

end while





//
