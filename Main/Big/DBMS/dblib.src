//DBMS for libs

//char aliases
tab=char(9)
endl=char(10)
quote=char(34)
//color aliases
colEND="</color>"
colFFF="<color=#fff>"
colF22="<color=#f22>"
col2F2="<color=#2f2>"
col22F="<color=#22f>"
colFF2="<color=#ff2>"//yellow
col2FF="<color=#2ff>"//cyan
colF2F="<color=#f2f>"//magenta

//Main.lib
//shorts for lib
SHELL = get_shell
HOST = get_shell.host_computer
FILE_ROOT = get_shell.host_computer.File("/")
//
ERR_PRINT=function(str,fg=0)
	print("<color=#F22><b> ERROR: </b></color>"+str)
	if fg then return str else return 0
end function
ERR_FATAL=function(str)
	exit("<color=#F22><b> ERROR_FATAL: </b></color>"+str)
end function
ERR_STRING=function(str)
	return("<color=#F22><b> ERROR: </b></color>"+str)
end function
cs=function(string)
	clear_screen
	if string then print(string)
end function
col=function(color,s)
	return "<color=#"+color+">"+s//+"</color>"
end function
mark=function(color,s)
	return "<mark=#"+color+">"+s//+"</color>"
end function
dbg=function(str)//печатает "Debug: str"
	if flag_dbg then print("<color=#AAA><b>Debug:</b> <color=#FFF>"+str+"</color>")
end function
file2root=function(f)
	if typeof(f)!="file" then return ERR_PRINT(colFF2+"file2root:"+colFFF+" type of "+colFF2+f+colFFF+" is "+colFF2+typeof(f))
	while f.path!="/"
		f=f.parent
	end while
	return f
end function
list_s2int=function(list,strong=0)
	rv=[]
	while list.len>0
		tmp=list.pull.to_int
		if strong and typeof(tmp)!="number" then continue
		rv.push(tmp)
	end while
	return rv
end function
prmExist=function(s)//проверка существования параметра s в globals.params
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower==s.lower then return true
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			for ch in param
				if ch.lower==s.lower then return true
			end for
		end for
	return false
end function
prmTake=function(s)//проверка существования и удаление параметра s в globals.params
	substr=function(subs)
		for ch in subs
			if ch.lower==s.lower then return true
		end for
		return false
	end function
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower==s.lower then
				params.remove(params.indexOf(s))
				return true
			end if
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			if substr(param) then
				indx=params.indexOf(param)
				globals.params[indx]=params[indx].remove(s)
				if params[indx].len<2 then params.remove(indx)
				return true
			end if
		end for
	return false
end function
fill=function(s, ln, side="s+", filler=" ")
	s=str(s)
	if s.len >= ln then return s
	filler=filler*ln
	if side=="s+" then return (s+filler)[:ln]
	if side=="+s" then return (filler+s)[-ln:]
end function
form=function(list)
	rv=""
	for l in list
		if typeof(l)=="string" then
			rv=rv+l
			continue
		end if
		p0=l[0]
		if l.len>1 then
			p1=l[1]
		else
			rv=rv+p0
			continue
		end if
		if l.len>2 then
			p2=l[2]
		else
			rv=rv+fill(p0,p1)
			continue
		end if
		if l.len>3 then
			p3=l[3]
		else
			rv=rv+fill(p0,p1,p2)
			continue
		end if
		rv=rv+fill(p0,p1,p2,p3)
	end for
	return rv
end function
connF=function(shell, ip, pass, port=22, username="root", type="ssh")
	dbg("connF")
	if not (shell or ip or pass) then ERR_PRINT("connF: need more params")
//	dbg(shell.host_computer.public_ip+" "+ip+" "+pass+" "+port+" "+username+" "+type)
	temp=shell.connect_service(ip.trim, port, username.trim, pass.trim , type.trim)
	if not temp then ERR_PRINT("connF: Not connected: "+temp)
//	if temp then dbg(temp.host_computer.public_ip)
	return temp
end function
connChain=function(shellList, oldShell)
  if not oldShell then oldShell=get_shell
  for i in range (0, SERVER_LIST.len-1, 2)
    newShell=connF(oldShell,shellList[i], shellList[i+1])
    if not newShell then ERR_FATAL("Connection failed")
  //  dbg(newShell.host_computer.public_ip+" "+newShell.host_computer.local_ip)
    oldShell=newShell
  end for
  return newShell
end function
choose=function(choices, default=-1)
	if not choices then ERR_PRINT("no choices!")
	for i in range(0,choices.len-1)
		if i==0 then
			print("<color=#ff2><b>"+choices[i]+"</b>")
		else
			print("<color=#ff2><b>["+fill(i+"]", 4)+"</b><color=#fff>"+choices[i])
		end if
	end for
	prompt="> "
	if default>-1 then prompt="[default="+default+"] > "
	while 1
		uc=user_input("<color=#ff2>"+prompt+"<color=#fff>")
		if uc.len==0 then
			if default>-1 then return [default]
			continue
		end if
		uc=uc.split(" ")
		uc=list_s2int(uc,1)
		misses=[]
		rv=[]
		for i in uc
			if typeof(i)=="number" then
				if i>0 and i<choices.len then rv.push(i) else misses.push(i)
			else
				misses.push(i)
			end if
		end for
		if misses.len>0 then print("<color=#ff2>Not a valid choices: "+misses.join(" "))
		if rv.len>0 then return rv
	end while
end function
chooseYesNo=function(default, prompt="")
	if prompt.len>0 then print("<b>"+prompt+"</b>")
	if default then
		prompt="y/n [Enter = Yes] > "
	else
		prompt="y/n [Enter = No] > "
	end if
	while 1
		resp=user_input(prompt)
		if resp.len==0 then return default
		if resp.lower[0]=="y"or resp.lower[0]=="н" then return true
		if resp.lower[0]=="n"or resp.lower[0]=="т" then return false
	end while
end function

//новый инклюд
//include libs LibX and LibC
includeLib=function()
	grabLibs=function(dir)
		X=[]
		C=[]
		for f in dir.get_files
			lib=include_lib(f.path)
			if lib then
				if typeof(lib)=="MetaxploitLib" then X.push(f)
				if typeof(lib)=="cryptoLib" then C.push(lib)
			end if
		end for
		for f in dir.get_folders
			tmp=grabLibs(f)
			X=tmp[0]+X
			C=tmp[1]+C
		end for
		return [X,C]
	end function
	listOfLibs=grabLibs(get_shell.host_computer.File("/"))
	Xlist=listOfLibs[0]
	Clist=listOfLibs[1]
	if Clist.len>0 then globals.LibC=Clist[0] else ERR_PRINT("Crypto lib not found")
	if Xlist.len==0 then
		globals.LibX=null
		return ERR_PRINT("Metaxploit lib not found")
	end if
	LibX=null
	for file in Xlist
		if not file then continue
		if not LibX then
			LibX=include_lib(file.path)
			lvl1=list_s2int(LibX.load(file.path).version.split("."))
			continue
		end if
		lib=LibX.load(file.path)
		lvl2=list_s2int(lib.version.split("."))
		for i in [0,1,2]
			if lvl1[i]<lvl2[i] then
				lvl1=lvl2
				LibX=include_lib(file.path)
				break
			end if
		end for
	end for
	globals.LibX=LibX
	if not LibX then return ERR_PRINT("Metaxploit lib not found")
	return
end function



//тестовые кастомные функции
//все они начинаются с cus для того что бы выдавались в подсказке при печати
cusInput=function(s,fg=0,hm=0)
	if fg then fg=1
	if s[-1]==" " then s=s[:-1]+"<color=#0000>x"
	return user_input(colFF2+"<mark=#ffff0020>"+s+colFFF+"<mark=#ffffff20>",fg)
end function

//files
cusFile=function(p,f,hm=0)
	if not p then
		ERR_PRINT("Void path")
		return 0
	end if
	if not f then f=get_shell.host_computer.File("/")
	f=file2root(f)
	if p=="/" then return f
	if parent_path(p)==p then p=current_path+"/"+p
	if p[-1]=="/" then p=p[:-1]
	pl=p.split("/")[1:]
	while pl.len>1
		i=pl.pull
		for j in f.get_folders
			if j.name==i then
				f=j
				break
			end if
		end for
		if f.name!=i then
			if hm then ERR_FATAL("Not found folder "+col("ff2",i)+col("f22"," in folder: ")+col("ff2",f.path)) else ERR_PRINT("Not found folder "+col("ff2",i)+col("f22"," in folder: ")+col("ff2",f.path))
			return 0
		end if
	end while
	for i in f.get_folders+f.get_files
		if i.name==pl[0] then
			f=i
			break
		end if
	end for
	if f.name!=pl[0] then
		if hm then ERR_FATAL("Not found file/folder "+col("ff2",pl[0])+col("f22"," in folder: ")+col("ff2",f.path)) else ERR_PRINT("Not found file "+col("ff2",pl[0])+col("f22"," in folder: ")+col("ff2",f.path))
		return 0
	end if
	return f
end function

cusRename=function(f,nn,hm=0)
	if not f then
		ERR_PRINT("Void fileObj")
		return 0
	end if
	ff=f.parent
	if not ff and hm then ERR_FATAL("file - ""/"" is not valid target to renaming!!!")
	if not ff then ERR_PRINT("file - ""/"" is not valid target to renaming!!!")
	rvl=f.rename(nn)
	if rvl.len>0 then
		if hm then ERR_FATAL(rvl)
		ERR_PRINT(rvl)
		return 0
	end if
	for i in ff.get_files
		if i.name==nn then return i
	end for
	return 0
end function

//end main.lib


DBMS_lib=function(dirFile)
	help=function()
		print(colFFF+"bdlib <path> [opt: -g, -p]")
		print(colFFF+"-g --get <destPath(folder)>")
		print(colFFF+"-p --put <origPath(folder(r)/file)>")
		print(colFFF+"DBMS for cloud libs storage")
		return
	end function
	collectLibs=function(dirFile)
		rv=[]
		for i in dirFile.get_files
			if LibX.load(i.path) then rv.push(i)
		end for
		for i in dirFile.get_folders
			rv=rv+collectLibs(i)
		end for
		return rv
	end function
	getLibs = function(targetDirPath)
		dbg("getLibs_F")
		choices = ["Get:"]
	  libNameDirFileList = SERVER_DB_FILE.get_folders
		dbg("lib types: "+libNameDirFileList.len)
		libFileList=[0]
	  for nameDir in libNameDirFileList
		  for verDir in nameDir.get_folders
				files=verDir.get_files
				if files.len!=1 then//for cathing BAGS
					ERR_PRINT("Libs in lib folder: "+files)
					continue
				end if
				libFileList.push(files[0])
				choices.push(fill(nameDir.name,18)+verDir.name)
		  end for
	  end for
		picks = choose(choices, choices.len-1)
	  for i in picks
			dbg(endl+libFileList[i].path+endl+targetDirPath+"/"+libFileList[i].name)
			print(SERVER_SHELL.scp(libFileList[i].path,targetDirPath,get_shell))
		end for
	end function
	putLibs = function(targetLibPath)
		dbg("putLibs_F")
	  targetLibFile = cusFile(targetLibPath)
		if not targetLibFile then return ERR_PRINT("File not found")
		metaLibFilesList=[]
		if targetLibFile.is_folder then metaLibFilesList=collectLibs(targetLibFile) else metaLibFilesList.push(targetLibFile)
	  dbg(metaLibFilesList)
		if metaLibFilesList.len==0 then return ERR_PRINT("Libs not found")
		for file in metaLibFilesList
			dbg(file.path)
			if not file then continue
			metaLib=LibX.load(file.path)
			if not metaLib then continue
			libFolderName=(metaLib.lib_name.split(".")[0]+".so").replace("_","..")
			libFolderNameFile=SERVER_HOST.File(SERVER_MAIN_FOLDER_PATH+libFolderName)
			if not libFolderNameFile then
				SERVER_HOST.create_folder(SERVER_MAIN_FOLDER_PATH, libFolderName)
				libFolderNameFile=SERVER_HOST.File(SERVER_MAIN_FOLDER_PATH+libFolderName)
			end if
			libFolderVerFile=SERVER_HOST.File(libFolderNameFile.path+"/"+metaLib.version)
			if not libFolderVerFile then
				SERVER_HOST.create_folder(libFolderNameFile.path,metaLib.version)
				libFolderVerFile=SERVER_HOST.File(libFolderNameFile.path+"/"+metaLib.version)
			end if
			libFile=SERVER_HOST.File(libFolderVerFile.path+"/"+libFolderName)
			if not libFile then
				get_shell.scp(file.path,libFolderVerFile.path,SERVER_SHELL)
				cusFile(libFolderVerFile.path+"/"+metaLib.lib_name,SERVER_HOST.File("/")).rename(libFolderName)
			end if
		end for
	end function

	//---Var---//
	flag_dbg = false

	//блок для работы с сервером
	SERVER_LIST = [] //LIST OF "ip","SSHpass","ip","SSHpass"...

	PROGRAM = {}
	PROGRAM.VERSION_S = "0.0.1"
	PROGRAM.VERSION_L_N = []
	PROGRAM.NAME = "dblib"

	SERVER_MAIN_FOLDER_PATH = "/programs/"+PROGRAM.NAME+"/DB/"
	VER_ON_SERV_PATH = "/programs/"+PROGRAM.NAME+"/ver"
	programsStorDirOnServPath = "/programs/"+PROGRAM.NAME+"/"
	NAME_VER = PROGRAM.NAME+" v"+PROGRAM.VERSION_S
	//

	//---Init---//
	if prmTake("--dbg") or prmTake("--debug") then flag_dbg = true

	if prmTake("--help") or prmTake("-h") then help()
	if not get_router("IP_YOUR_DRM_SERVER").ping_port(1) then exit("Lars say NO")

	flag_put=0
	flag_get=0
	if prmExist("-p") or prmExist("--put") then flag_put=1
	if prmExist("-g") or prmExist("--get") then flag_get=1
	if not (flag_get or flag_put) then return help
	//server
	SERVER_SHELL = connChain(SERVER_LIST)
	SERVER_HOST = SERVER_SHELL.host_computer
	//updateСheckF()//обновление программы с сервера SERVER_SHELL
	//
	SERVER_DB_FILE=cusFile(SERVER_MAIN_FOLDER_PATH,SERVER_HOST.File("/"))
	includeLib()
	if not LibX then SERVER_SHELL.scp(SERVER_DB_FILE.path+"/lightMeta",parent_path(program_path),get_shell)
	LibX=include_lib(parent_path(program_path)+"/lightMeta")
	if not LibX then exit(ERR_PRINT("need metaxploit lib"))

	//---Main---//
	targetLibPath=""
	print(targetLibPath)
	for param in params
		if param[0]!="-" then targetLibPath=param
		if param[0]=="/" then break
	end for
	print(targetLibPath)
	if targetLibPath=="" then targetLibPath="/lib"
	print(targetLibPath)
	if targetLibPath.len>1 and targetLibPath[-1]=="/" then targetLibPath=targetLibPath[:-1]
	if flag_put then putLibs(targetLibPath)
	if flag_get then getLibs(targetLibPath)
end function
DBMS_lib()
