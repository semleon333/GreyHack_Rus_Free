//Main

//КОПИРОВАТЬ 5	-51	-134 	-212 -390

//char aliases
tab=char(9)
endl=char(10)
quote=char(34)
//color aliases
colEND="</color>"
colFFF="<color=#fff>"
colF22="<color=#f22>"
col2F2="<color=#2f2>"
col22F="<color=#22f>"
colFF2="<color=#ff2>"//yellow
col2FF="<color=#2ff>"//cyan
colF2F="<color=#f2f>"//magenta

//Main.lib
//shorts for lib	// !!!---ОЧЕНЬ ВАЖНО ДЛЯ РАБОТЫ ЛИБЫ---!!!
SHELL = get_shell
HOST = get_shell.host_computer
FILE_ROOT = get_shell.host_computer.File("/")
CURRENT_PATH=current_path
//
ERR_PRINT=function(s,fg=0)
	print("<color=#F22><b> ERROR: </b></color>"+s+colFF2+" time: "+colFFF+str(time))
	if fg then return str else return 0
end function
ERR_FATAL=function(s)
	exit("<color=#F22><b> ERROR_FATAL: </b></color>"+s)
end function
ERR_STRING=function(s)
	return("<color=#F22><b> ERROR: </b></color>"+s)
end function
cs=function(string)
	clear_screen
	if string then print(string)
end function
col=function(color,s)
	return "<color=#"+color+">"+s//+"</color>"
end function
mark=function(color,s)
	return "<mark=#"+color+">"+s//+"</color>"
end function
dbg=function(str)//печатает "Debug: str"
	if flag_dbg then print("<color=#AAA><b>Debug:</b> <color=#FFF>"+str+"</color>")
end function
file2root=function(f)
	if typeof(f)!="file" then return ERR_PRINT(colFF2+"file2root:"+colFFF+" type of "+colFF2+f+colFFF+" is "+colFF2+typeof(f))
	while f.path!="/"
		f=f.parent
	end while
	return f
end function
list_s2int=function(list,strong=0)
	rv=[]
	while list.len>0
		tmp=list.pull.to_int
		if strong and typeof(tmp)!="number" then continue
		rv.push(tmp)
	end while
	return rv
end function
prmExist=function(s)//проверка существования параметра s в globals.params
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower==s.lower then return true
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			for ch in param
				if ch.lower==s.lower then return true
			end for
		end for
	return false
end function
prmTake=function(s)//проверка существования и удаление параметра s в globals.params
	substr=function(subs)
		for ch in subs
			if ch.lower==s.lower then return true
		end for
		return false
	end function
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower==s.lower then
				params.remove(params.indexOf(s))
				return true
			end if
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			if substr(param) then
				indx=params.indexOf(param)
				globals.params[indx]=params[indx].remove(s)
				if params[indx].len<2 then params.remove(indx)
				return true
			end if
		end for
	return false
end function
prmTakeIp=function()//проверка существования и удаление Ip в globals.params
	for i in range(0,params.len-1)
		s=params[i]
		if not is_valid_ip(s) then continue
		params.remove(i)
		return s
	end for
	return 0
end function
fill=function(s, ln, side="s+", filler=" ")
	s=str(s)
	if s.len >= ln then return s
	filler=filler*ln
	if side=="s+" then return (s+filler)[:ln]
	if side=="+s" then return (filler+s)[-ln:]
end function
form=function(list)
	rv=""
	for l in list
		if typeof(l)=="string" then
			rv=rv+l
			continue
		end if
		p0=l[0]
		if l.len>1 then
			p1=l[1]
		else
			rv=rv+p0
			continue
		end if
		if l.len>2 then
			p2=l[2]
		else
			rv=rv+fill(p0,p1)
			continue
		end if
		if l.len>3 then
			p3=l[3]
		else
			rv=rv+fill(p0,p1,p2)
			continue
		end if
		rv=rv+fill(p0,p1,p2,p3)
	end for
	return rv
end function
connF=function(shell, ip, pass, port=22, username="root", type="ssh")
	dbg("connF")
	if not (shell or ip or pass) then ERR_PRINT("connF: need more params")
//	dbg(shell.host_computer.public_ip+" "+ip+" "+pass+" "+port+" "+username+" "+type)
	temp=shell.connect_service(ip.trim, port, username.trim, pass.trim , type.trim)
	if not temp then ERR_PRINT("connF: Not connected: "+temp)
//	if temp then dbg(temp.host_computer.public_ip)
	return temp
end function
connChain=function(shellList, oldShell)
  if not oldShell then oldShell=get_shell
  for i in range (0, SERVER_LIST.len-1, 2)
    newShell=connF(oldShell,shellList[i], shellList[i+1])
    if not newShell then ERR_FATAL("Connection failed")
  //  dbg(newShell.host_computer.public_ip+" "+newShell.host_computer.local_ip)
    oldShell=newShell
  end for
  return newShell
end function
choose=function(choices, default=-1)
	if not choices then ERR_PRINT("no choices!")
	for i in range(0,choices.len-1)
		if i==0 then
			print("<color=#ff2><b>"+choices[i]+"</b>")
		else
			print("<color=#ff2><b>["+fill(i+"]", 4)+"</b><color=#fff>"+choices[i])
		end if
	end for
	prompt="> "
	if default>-1 then prompt="[default="+default+"] > "
	while 1
		uc=user_input("<color=#ff2>"+prompt+"<color=#fff>")
		if uc.len==0 then
			if default>-1 then return [default]
			continue
		end if
		uc=uc.split(" ")
		uc=list_s2int(uc,1)
		misses=[]
		rv=[]
		for i in uc
			if typeof(i)=="number" then
				if i>0 and i<choices.len then rv.push(i) else misses.push(i)
			else
				misses.push(i)
			end if
		end for
		if misses.len>0 then print("<color=#ff2>Not a valid choices: "+misses.join(" "))
		if rv.len>0 then return rv
	end while
end function
chooseYesNo=function(default, prompt="")
	if prompt.len>0 then print("<b>"+prompt+"</b>")
	if default then
		prompt="<color=#fff>y/n [Enter = Yes] <color=#ff2>> <color=#fff>"
	else
		prompt="<color=#fff>y/n [Enter = No] <color=#ff2>> <color=#fff>"
	end if
	while 1
		resp=user_input(prompt)
		if resp.len==0 then return default
		if resp.lower[0]=="y"or resp.lower[0]=="н" then return true
		if resp.lower[0]=="n"or resp.lower[0]=="т" then return false
	end while
end function

//КОПИРОВАТЬ ДО СЮДА

//старый простой инклюд с присвоением
includeLib=function(libName)//продвинутое включение либы
	paths=[CURRENT_PATH, "/lib", "/root", "/home/guest", "/bin", "/usr/bin"]
	for i in paths
		lib=include_lib(i+"/"+libName)
		if lib then return lib
	end for
	ERR_PRINT("Library not found: "+libName)
	return false
end function

//новый инклюд
//include libs LibX and LibC
includeLib=function()
	grabLibs=function(dir)
		X=[]
		C=[]
		for f in dir.get_files
			lib=include_lib(f.path)
			if lib then
				if typeof(lib)=="MetaxploitLib" then X.push(f)
				if typeof(lib)=="cryptoLib" then C.push(lib)
			end if
		end for
		for f in dir.get_folders
			tmp=grabLibs(f)
			X=tmp[0]+X
			C=tmp[1]+C
		end for
		return [X,C]
	end function
	listOfLibs=grabLibs(get_shell.host_computer.File("/"))
	Xlist=listOfLibs[0]
	Clist=listOfLibs[1]
	if Clist.len>0 then globals.LibC=Clist[0] else ERR_PRINT("Crypto lib not found")
	if Xlist.len==0 then
		globals.LibX=null
		return ERR_PRINT("Metaxploit lib not found")
	end if
	LibX=null
	for file in Xlist
		if not file then continue
		if not LibX then
			LibX=include_lib(file.path)
			lvl1=list_s2int(LibX.load(file.path).version.split("."))
			continue
		end if
		lib=LibX.load(file.path)
		lvl2=list_s2int(lib.version.split("."))
		for i in [0,1,2]
			if lvl1[i]<lvl2[i] then
				lvl1=lvl2
				LibX=include_lib(file.path)
				break
			end if
		end for
	end for
	globals.LibX=LibX
	if not LibX then return ERR_PRINT("Metaxploit lib not found")
	return
end function





//тестовые кастомные функции
//все они начинаются с cus для того что бы выдавались в подсказке при печати
cusInput=function(s,fg=0)
	if fg then fg=1
	if s[-1]==" " then s=s[:-1]+"<color=#0000>x"
	return user_input(colFF2+"<mark=#ffff0020>"+s+colFFF+"<mark=#ffffff20>",fg)
end function

//files
cusFile=function(p,f,sm=0)
	if not p then
		ERR_PRINT("Void path")
		return 0
	end if
	if not f then f=get_shell.host_computer.File("/")
	f=file2root(f)
	if p.len>1 and p[:2]=="//" then p=p[1:]	//для того что бы можно было вводить путь типа / + / + имя
	if p=="/" then return f	//возврат если нужен корень
	if parent_path(p)==p then p=CURRENT_PATH+"/"+p	//относительный путь
	if p[-1]=="/" then p=p[:-1]
	pl=p.split("/")[1:]
	while pl.len>1
		i=pl.pull
		for j in f.get_folders
			if j.name==i then
				f=j
				break
			end if
		end for
		if f.name!=i then
			if not sm then ERR_PRINT(col("fff","Not found folder ")+col("ff2",i)+col("fff"," in folder: ")+col("ff2",f.path))
			return 0
		end if
	end while
	for i in f.get_folders+f.get_files
		if i.name==pl[0] then
			f=i
			break
		end if
	end for
	if f.name!=pl[0] then
		if not sm then ERR_PRINT(col("fff","Not found file/folder ")+col("ff2",pl[0])+col("fff"," in folder: ")+col("ff2",f.path))
		return 0
	end if
	return f
end function

cusRename=function(f,nn,sm=0)
	if not f then
		ERR_PRINT("Void fileObj")
		return 0
	end if
	ff=f.parent
	if not (ff and sm) then ERR_PRINT("file - ""/"" is not valid target to renaming!!!")
	rvl=f.rename(nn)
	if rvl.len>0 and not sm then return ERR_PRINT(rvl)
	for i in ff.get_files
		if i.name==nn then return i
	end for
	return 0
end function

// [OUT] file или 0.
// [IN] string inputPath - Путь + Имя файла или просто Имя файла
// [IN OPT]	computer compObj - Локальный или удалённый host_computer
//                           - если не задан берётся get_shell.host_computer
// [IN OPT] bool ow - 1:перезапись включая бинарники
// [IN] bool sm - 1:без выведения стандартных ошибок
cusTouch=function(inputPath, compObj, ow=0, sm=0)
	if typeof(compObj)!="computer" then compObj=get_shell.host_computer
	if typeof(inputPath)!="string" then return ERR_PRINT("Incorrect params: "+inputPath)
	if parent_path(inputPath)==inputPath then
		targetPath=CURRENT_PATH
		fileName=inputPath
	else
		targetPath=parent_path(inputPath)
		fileName=inputPath.split("/")[-1]
	end if
	if targetPath[-1]!="/" then targetPath=targetPath+"/"
	if targetPath.len>1 and targetPath[-1]=="/" then targetPath=targetPath[:-1]
	//этап 1, проверка существования файла и разборки если он есть
	file=cusFile(targetPath+"/"+fileName,compObj.File("/"),sm)
	if file then
		if not (file.is_binary or ow) then return file
		if ow then
			if file.is_binary then
				tmpName=str(rnd)[2:]
				compObj.touch(targetPath,tmpName)
				tmpFile=cusFile(targetPath+"/"+tmpName,compObj.File("/"),sm)
				tmpFile.move(targetPath,fileName)
				return cusFile(targetPath+"/"+fileName,compObj.File("/"),sm)
			else
				tmp=file.set_content("")
				if tmp!=1 then return ERR_PRINT(tmp)
				return file
			end if
		end if
	end if
	//этап 2, создание файла и разборки если его нет
	tmp=compObj.touch(targetPath,fileName)
	if tmp!=1 then return ERR_PRINT(tmp)
	file=cusFile(targetPath+"/"+fileName,compObj.File("/"),sm)
	if file then return file
	ERR_PRINT("Что-то пошло не так, если вы это видите - БЕГИТЕ")
	return file
end function




cusMove=function(f,np=CURRENT_PATH,sm=0)
	if typeof(f)!="file" then return ERR_PRINT(colFFF+"Move: Wrong file: "+f)
	f.move()
end function








//---Var---//
flag_dbg=false

//server
SERVER_LIST=["<ip>","<pass>","<ip>","<pass>","<ip>","<pass>"]
PROXY_SERVER_CRED=["<proxy_ip>","<proxy_pass>"]
PROGRAM={}
PROGRAM.VERSION_S="0.0.1"
PROGRAM.VERSION_L_N=[]
PROGRAM.NAME="PROGRAMNAME"
SERVER_MAIN_FOLDER_PATH="/programs/"+PROGRAM.NAME+"/DB/"
VER_ON_SERV_PATH="/programs/"+PROGRAM.NAME+"/ver"
programsStorDirOnServPath="/programs/"+PROGRAM.NAME+"/"
NAME_VER=PROGRAM.NAME+" v"+PROGRAM.VERSION_S
//

main=function()
	help=function()
		print(colFFF+"program [opt: -1, -2, [opt: ololo]")
		print(colFFF+"description")
		return
	end function
	//---Init---//
	if prmTake("--dbg") or prmTake("--debug") then flag_dbg=true
	//connect +log evade
	print(colFF2+"log evade start")
	if get_shell.host_computer.File("/var/system.log") then host.File("/var/system.log").move("/var/", ".qEuXCmvxMrwNfzO")
	PROXY_SERVER_SHELL=connF(get_shell,PROXY_SERVER_CRED[0],PROXY_SERVER_CRED[1])
	if get_shell.host_computer.File("/var/.qEuXCmvxMrwNfzO") then host.File("/var/.qEuXCmvxMrwNfzO").move("/var/", "system.log")
	print(colFF2+"log evade end")
	SERVER_SHELL=connChain(SERVER_LIST,PROXY_SERVER_SHELL)
	//
	if not SERVER_SHELL then ERR_FATAL("Connection error")
	SERVER_HOST=SERVER_SHELL.host_computer

	//быстрое включение
	//LibX=includeLib("metaxploit.so")
	//LibC=includeLib("crypto.so")
	//глубокое включение
	includeLib()

	if prmTake("--help") or prmTake("-h") then return help()
end function

//Fast DRM
if not get_router("IP_YOUR_DRM_SERVER").ping_port(1) then exit("Lars say NO")
main()











//ниже ахтунг




updateСheckF=function()
	comVersionsF=function(versionOnServS)
	  dbg("comVersionsF")
		dbg("versionOnServS "+versionOnServS)
		dbg("PROGRAM.VERSION_S "+PROGRAM.VERSION_S)
		versionOnServL=[]
		version_prog=[]
		S=PROGRAM.VERSION_S.split(".")
		for s in S
			version_prog.push(s.to_int())
		end for
		for s in versionOnServS.split(".")
			versionOnServL.push(s.to_int())
		end for
		dbg("versionOnServL "+versionOnServL)
		dbg("version_prog "+version_prog)
		for i in range(0, versionOnServL.len - 1)
			if versionOnServL[i] > version_prog[i] then return true
			if versionOnServL[i] < version_prog[i] then return false
		end for
		return false
	end function
	updateProgramF=function(versionFile)
		dbg("updateProgramF")
		programStorDirOnServFile=SERVER_HOST.File(programsStorDirOnServPath+PROGRAM.NAME)
		if not programStorDirOnServFile then ERR_FATAL("New version file not found")
		dbg("programStorDirOnServFile "+programStorDirOnServFile.path)
		SERVER_SHELL.scp(programStorDirOnServFile.path, current_path, shell)
		if program_path.split("/")[-1]==PROGRAM.NAME then
			shell.launch(current_path+"/"+PROGRAM.NAME)
		else
			shell.launch(current_path+"/"+PROGRAM.NAME, "--deleting "+program_path)
		end if
		exit()
	end function

	print(colFF2+"start update")
	if not active_user=="root" then print("<color=#FF2222>Run from <b>root</b></color>")
	if params.len > 0 and params[0]=="--deleting" then
		if host.File(params[1]) then
			host.File(params[1]).delete
			print("Old version deleted")
		end if
	end if
	if not SERVER_SHELL then ERR_FATAL("Server not available")
  versionFile=SERVER_HOST.File(VER_ON_SERV_PATH)
	dbg("versionFile: "+versionFile)
	if not versionFile then ERR_FATAL("No versionFile on server")
	if versionFile.get_content().split(".").len != 3 then ERR_FATAL("versionFile on server incorrect")

	co_versionFile=SERVER_HOST.File(PROGRAM.CO_VER_PATH)
	dbg("versionFile: "+co_versionFile)
	if not co_versionFile then ERR_FATAL("No versionFile on server")
	if co_versionFile.get_content().split(".").len != 3 then ERR_FATAL("versionFile on server incorrect")
	dbg("versionFile: "+co_versionFile)
	if comVersionsF(co_versionFile.get_content()) then
		if user_input("???").trim != SERVER_SHELL.host_computer.File(DOWNLOAD_PASS_FILE_PATH).get_content() then
			print("get")
			wait
			print("the")
			wait
			print("<color=#A44>Fuck</color>")
			wait
			exit("<color=#F22>OUT</color>")
		end if
	end if

	if comVersionsF(versionFile.get_content()) then updateProgramF()
	print(colFF2+"end update")
	wait
end function//

// OLD
// OLD
// OLD


//старая версия
existParam = function(paramType)//проверка существования параметра paramType в globals.params
	for param in params
		if param.lower == paramType.lower then return true
	end for
	return false
end function
//



padSpaces = {}
padSpaces.Left = function(s, l, p=" ")
  if typeof(s) == "number" then s = s + ""
  if s.len >= l then return s
  padString = ""
  c = l - s.len
  while c > 0
    padString = padString + p
    c = c - 1
  end while
  return (s+padString)
end function
padSpaces.Right = function(s, l, p=" ")
  if typeof(s) == "number" then s = s + ""
  if s.len >= l then return s
  padString = ""
  c = l - s.len
  while c > 0
    padString = p + padString
    c = c - 1
  end while
  return (padString+s)
end function



choice = {}
choice.list123 = function(choices, default = -1)
	c=0
	for choice in choices
		if c==0 then
			print("<color=#ff2><b>"+choices[0]+"</b>")
		else
			print("<color=#ff2><b>["+fill(c+"]", 4)+"</b><color=#fff>"+choices[c])
		end if
		c=c+1
	end for
	prompt="> "
	if default>-1 then prompt="[default="+default+"] > "
	while 1
		user_choice = user_input(colFF2+prompt+colFFF)
		if user_choice.len==0 and default>-1 then return default
		user_choice = user_choice.to_int
		if not typeof(user_choice)=="number" or user_choice<1 or user_choice>=c then
			ERR_PRINT("Not a valid choice")
			continue
		end if
		return user_choice
	end while
end function
includeLib = function(libName)
	p = [current_path, "/lib", "/bin", "/usr/bin"]
	for i in p
		lib = include_lib(i + "/" + libName)
		if lib then return lib
	end for
	ERR_PRINT("Library not found: " + libName)
	return false
end function
