//убер ls
//char aliases
tab=char(9)
endl=char(10)
quote=char(34)
//color aliases
colEND="</color>"
colFFF="<color=#fff>"
colF22="<color=#f22>"
col2F2="<color=#2f2>"
col22F="<color=#22f>"
colFF2="<color=#ff2>"//yellow
col2FF="<color=#2ff>"//cyan
colF2F="<color=#f2f>"//magenta

//Main.lib
//shorts for lib
SHELL = get_shell
HOST = get_shell.host_computer
FILE_ROOT = get_shell.host_computer.File("/")
//
ERR_PRINT=function(str,fg=0)
	print("<color=#F22><b> ERROR: </b></color>"+str)
	if fg then return str else return 0
end function
ERR_FATAL=function(str)
	exit("<color=#F22><b> ERROR_FATAL: </b></color>"+str)
end function
ERR_STRING=function(str)
	return("<color=#F22><b> ERROR: </b></color>"+str)
end function
cs=function(string)
	clear_screen
	if string then print(string)
end function
col=function(color,s)
	return "<color=#"+color+">"+s//+"</color>"
end function
mark=function(color,s)
	return "<mark=#"+color+">"+s//+"</color>"
end function
dbg=function(str)//печатает "Debug: str"
	if flag_dbg then print("<color=#AAA><b>Debug:</b> <color=#FFF>"+str+"</color>")
end function
file2root=function(f)
	if typeof(f)!="file" then return ERR_PRINT(colFF2+"file2root:"+colFFF+" type of "+colFF2+f+colFFF+" is "+colFF2+typeof(f))
	while f.path!="/"
		f=f.parent
	end while
	return f
end function
list_s2int=function(list,strong=0)
	rv=[]
	while list.len>0
		tmp=list.pull.to_int
		if strong and typeof(tmp)!="number" then continue
		rv.push(tmp)
	end while
	return rv
end function
prmExist=function(s)//проверка существования параметра s в globals.params
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower==s.lower then return true
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			for ch in param
				if ch.lower==s.lower then return true
			end for
		end for
	return false
end function
prmTake=function(s)//проверка существования и удаление параметра s в globals.params
	substr=function(subs)
		for ch in subs
			if ch.lower==s.lower then return true
		end for
		return false
	end function
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower==s.lower then
				params.remove(params.indexOf(s))
				return true
			end if
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			if substr(param) then
				indx=params.indexOf(param)
				globals.params[indx]=params[indx].remove(s)
				if params[indx].len<2 then params.remove(indx)
				return true
			end if
		end for
	return false
end function
fill=function(s, ln, side="s+", filler=" ")
	s=str(s)
	if s.len >= ln then return s
	filler=filler*ln
	if side=="s+" then return (s+filler)[:ln]
	if side=="+s" then return (filler+s)[-ln:]
end function
form=function(list)
	rv=""
	for l in list
		if typeof(l)=="string" then
			rv=rv+l
			continue
		end if
		p0=l[0]
		if l.len>1 then
			p1=l[1]
		else
			rv=rv+p0
			continue
		end if
		if l.len>2 then
			p2=l[2]
		else
			rv=rv+fill(p0,p1)
			continue
		end if
		if l.len>3 then
			p3=l[3]
		else
			rv=rv+fill(p0,p1,p2)
			continue
		end if
		rv=rv+fill(p0,p1,p2,p3)
	end for
	return rv
end function
connF=function(shell, ip, pass, port=22, username="root", type="ssh")
	dbg("connF")
	if not (shell or ip or pass) then ERR_PRINT("connF: need more params")
//	dbg(shell.host_computer.public_ip+" "+ip+" "+pass+" "+port+" "+username+" "+type)
	temp=shell.connect_service(ip.trim, port, username.trim, pass.trim , type.trim)
	if not temp then ERR_PRINT("connF: Not connected: "+temp)
//	if temp then dbg(temp.host_computer.public_ip)
	return temp
end function
connChain=function(shellList, oldShell)
  if not oldShell then oldShell=get_shell
  for i in range (0, SERVER_LIST.len-1, 2)
    newShell=connF(oldShell,shellList[i], shellList[i+1])
    if not newShell then ERR_FATAL("Connection failed")
  //  dbg(newShell.host_computer.public_ip+" "+newShell.host_computer.local_ip)
    oldShell=newShell
  end for
  return newShell
end function
choose=function(choices, default=-1)
	if not choices then ERR_PRINT("no choices!")
	for i in range(0,choices.len-1)
		if i==0 then
			print("<color=#ff2><b>"+choices[i]+"</b>")
		else
			print("<color=#ff2><b>["+fill(i+"]", 4)+"</b><color=#fff>"+choices[i])
		end if
	end for
	prompt="> "
	if default>-1 then prompt="[default="+default+"] > "
	while 1
		uc=user_input("<color=#ff2>"+prompt+"<color=#fff>")
		if uc.len==0 then
			if default>-1 then return [default]
			continue
		end if
		uc=uc.split(" ")
		uc=list_s2int(uc,1)
		misses=[]
		rv=[]
		for i in uc
			if typeof(i)=="number" then
				if i>0 and i<choices.len then rv.push(i) else misses.push(i)
			else
				misses.push(i)
			end if
		end for
		if misses.len>0 then print("<color=#ff2>Not a valid choices: "+misses.join(" "))
		if rv.len>0 then return rv
	end while
end function
chooseYesNo=function(default, prompt="")
	if prompt.len>0 then print("<b>"+prompt+"</b>")
	if default then
		prompt="y/n [Enter = Yes] > "
	else
		prompt="y/n [Enter = No] > "
	end if
	while 1
		resp=user_input(prompt)
		if resp.len==0 then return default
		if resp.lower[0]=="y"or resp.lower[0]=="н" then return true
		if resp.lower[0]=="n"or resp.lower[0]=="т" then return false
	end while
end function

includeLib=function(libName)//продвинутое включение либы
	paths=[CURRENT_PATH, "/lib", "/home/guest", "/bin", "/usr/bin"]
	for i in paths
		lib=include_lib(i+"/"+libName)
		if lib then return lib
	end for
	ERR_PRINT("Library not found: "+libName)
	return false
end function


//тестовые кастомные функции
//все они начинаются с cus для того что бы выдавались в подсказке при печати
cusInput=function(s,fg=0,hm=0)
	if fg then fg=1
	if s[-1]==" " then s=s[:-1]+"<color=#0000>x"
	return user_input(colFF2+"<mark=#ffff0020>"+s+colFFF+"<mark=#ffffff20>",fg)
end function

//files
cusFile=function(p,f,hm=0)
	if not p then
		ERR_PRINT("Void path")
		return 0
	end if
	if not f then f=get_shell.host_computer.File("/")
	f=file2root(f)
	if p=="/" then return f
	if parent_path(p)==p then p=current_path+"/"+p
	if p[-1]=="/" then p=p[:-1]
	pl=p.split("/")[1:]
	while pl.len>1
		i=pl.pull
		for j in f.get_folders
			if j.name==i then
				f=j
				break
			end if
		end for
		if f.name!=i then
			if hm then ERR_FATAL("Not found folder "+col("ff2",i)+col("f22"," in folder: ")+col("ff2",f.path)) else ERR_PRINT("Not found folder "+col("ff2",i)+col("f22"," in folder: ")+col("ff2",f.path))
			return 0
		end if
	end while
	for i in f.get_folders+f.get_files
		if i.name==pl[0] then
			f=i
			break
		end if
	end for
	if f.name!=pl[0] then
		if hm then ERR_FATAL("Not found file/folder "+col("ff2",pl[0])+col("f22"," in folder: ")+col("ff2",f.path)) else ERR_PRINT("Not found file "+col("ff2",pl[0])+col("f22"," in folder: ")+col("ff2",f.path))
		return 0
	end if
	return f
end function

cusRename=function(f,nn,hm=0)
	if not f then
		ERR_PRINT("Void fileObj")
		return 0
	end if
	ff=f.parent
	if not ff and hm then ERR_FATAL("file - ""/"" is not valid target to renaming!!!")
	if not ff then ERR_PRINT("file - ""/"" is not valid target to renaming!!!")
	rvl=f.rename(nn)
	if rvl.len>0 then
		if hm then ERR_FATAL(rvl)
		ERR_PRINT(rvl)
		return 0
	end if
	for i in ff.get_files
		if i.name==nn then return i
	end for
	return 0
end function




ls = function(comp,shellForConfig)
	lenParam = function(dir,prm)
		rv = 0
		fs = dir.get_files
		frs = dir.get_folders
		if prm=="owner" then
			if rv<dir.owner.len then rv=dir.owner.len
			for f in fs
				if rv<f.owner.len then rv=f.owner.len
			end for
		end if
		if prm=="group" then
			if rv<dir.group.len then rv=dir.group.len
			for f in fs
				if rv<f.group.len then rv=f.group.len
			end for
		end if
		for fr in frs
			tmp = lenParam(fr,prm)
			if rv<tmp then rv=tmp
		end for
		return rv
	end function
	configF = function(shell)
		col = {"dirRWX":"<color=#eee>","dirBase":"<color=#fff>","dirPath":"<color=#aaa>","dirName":"<color=#eee>","FileRWX":"<color=#aaa>","FileIfTXT":"<color=#fd0>","FileIfBIN":"<color=#9ce>"} //ca6 - папирус fd0 - золото
		confFile = shell.host_computer.File(home_dir+"/Config/ls.conf")
		if flag_genConfig then
			shell.host_computer.touch(home_dir+"/Config", "ls.conf")
			confFile = shell.host_computer.File(home_dir+"/Config/ls.conf")
			if confFile then
				temp = ""
				for i in col
					temp = temp + i.key + ":" + i.value[i.value.indexOf("#")+1:i.value.indexOf(">")] + char(10)
				end for
				confFile.set_content(temp[0:-1])
			end if
		end if
		if confFile then//if config-file exist - load configs
			confS = confFile.get_content
			if confS then
				confL = confS.split(char(10))
				dbg(confL)
				for i in confL
					i = i.split(":")
					col[i[0]] = "<color=#"+i[1]+">"
				end for
			end if
		end if
		return col
	end function
	main = function(dir)
		sizing = function(sizeS)
			while sizeS.len<7
				sizeS = "0"+sizeS
			end while
			return sizeS[0:-6]+"."+sizeS[-6:-3]+".Mb"
		end function
		getRWX = function(f)
			r="-"
			if f.has_permission("r") then r="r"
			w="-"
			if f.has_permission("w") then w="w"
			x="-"
			if f.has_permission("x") then x="x"
			return r+w+x
		end function

		rv = ""
	  frs = dir.get_folders
		fs = 0
	  if not flag_onlyDir then fs = dir.get_files
		if flag_hide or dir.name.indexOf(".") != 0 then
			if not flag_details then
	      rv = rv+col.dirBase+dir.name+endl
			else
				if dir.path!="/" then
					dirPath=col.dirPath+dir.path.split("/")[0:-1].join("/")+"/"+col.dirName+dir.name
				else
					dirPath=col.dirName+dir.path
				end if
				rv = rv+form([col.dirRWX+getRWX(dir)+"¦"+col.dirBase+dir.permissions,[dir.owner+" ",lenOwner+2,"+s"],[dir.group,lenGroup],[sizing(dir.size),13,"+s"]," ¦"+space+dirPath+endl])
				space = space+"  "
	    end if
		end if
		if cnt_depth<1 and not flag_recursion then return rv
		cnt_depth=cnt_depth-1
	  for f in fs
	    colorFile=col.FileIfTXT
			bonus=""
	  	if f.is_binary then
				colorFile=col.FileIfBIN
				if LibX then
					tmp=LibX.load(f.path)
					if tmp then bonus=colFFF+"ver: "+tmp.version
				end if
			else
				tmp=""
				for i in f.get_content.split(endl)
					if i.trim then tmp=tmp+1
				end for
				bonus=tmp.len+" ne str"
			end if
	  	if flag_hide or f.name.indexOf(".")!=0 then
				globals.ls_cnt_files=ls_cnt_files+1
	  		if not flag_details then
	        rv=rv+colorFile+f.name+endl
	        continue
	      end if
				filePath=col.dirPath+f.path.split("/")[0:-1].join("/")+"/"+colorFile+f.name
	  		rv=rv+form([col.FileRWX+getRWX(f)+"¦"+colorFile+f.permissions,[f.owner+" ",lenOwner+2,"+s"],[f.group,lenGroup],[sizing(f.size),13,"+s"]," ¦"+space,filePath,"   "+bonus+endl])
	  	end if
		end for
	  for f in frs
			if flag_hide or f.name.indexOf(".") != 0 then
				rv=rv+main(f)
				globals.ls_cnt_dirs=ls_cnt_dirs+1
			end if
		end for
	  return rv
	end function

	if prmTake("-h") or prmTake("--help") then
		print(colFFF+"ls [opt: -l, -a, -r, -d , -c (or comb, Ex: -lr -ad)] [opt: path]")
		print(colFFF+"version 1.2.0")
		print(colFFF+"-c - gen configuration file(for colors) <username>/Config/ls.conf")
		print(colFFF+"-l - detailed")
		print(colFFF+"-a - hidden files")
		print(colFFF+"-r --r[2-8] - recursive +depth")
		print(colFFF+"-d - only directories")
		print(colFFF+"Ex: ls; ls -lar /root -d; ls Config; ls -lard")
		return
	end if
	//print(". . . . | . . . . .10 . . . . | . . . . .20 . . . . | . . . . .30 . . . . | . . . . .40")
	space = ""
	folderPath=current_path
	for param in params
		if param[0] != "-" then folderPath = param
		if param[0] == "/" then break
	end for
	folder=comp.File(folderPath)
	if folder == null then return "<color=#ccc>"+program_path.split("/")[-1]+":<color=#f22> No such file or directory"
	lenOwner=lenParam(folder,"owner")
	lenGroup=lenParam(folder,"group")
	globals.ls_cnt_files=0
	globals.ls_cnt_dirs=1
	flag_hide= 0
	flag_details=0
	flag_recursion=0
	flag_onlyDir=0
	flag_genConfig=0
	cnt_depth=1
	if prmTake("-a") then flag_hide=1
	if prmTake("-l") then flag_details=1
	if prmTake("-r") then flag_recursion=1
	if prmTake("-d") then flag_onlyDir=1
	if prmTake("-c") then flag_genConfig=1
	for i in range(2,8)
 		if prmTake("--r"+i) then cnt_depth=i
	end for
	dbg("a"+flag_hide+" l"+flag_details+" r"+flag_recursion+" d"+flag_onlyDir+" c"+flag_genConfig+" r_cnt"+cnt_depth)
	col=configF(shellForConfig)
	rv=main(folder)[:-1]
	return colFFF+"Dirs: "+colFF2+ls_cnt_dirs+colFFF+" Files: "+colFF2+ls_cnt_files+endl+rv
end function

CURRENT_PATH=current_path
flag_dbg = false
//if prmTake("--dbg") or prmTake("--debug") then flag_dbg = true
if not get_router("IP_YOUR_DRM_SERVER").ping_port(1) then exit("Lars say NO")
LibX=includeLib("metaxploit.so")
rvls=ls(get_shell.host_computer,get_shell)
for s in rvls.split(endl)
	print(s)
end for
