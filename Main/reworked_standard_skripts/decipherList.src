//дешифровка из файла листа с хэшами >> в другой файл
//char aliases
tab = char(9)
endl = char(10)
quote = char(34)
//color aliases
colEND = "</color>"
colFFF = "<color=#fff>"
colF22 = "<color=#f22>"
col2F2 = "<color=#2f2>"
col22F = "<color=#22f>"
colFF2 = "<color=#ff2>"//yellow
col2FF = "<color=#2ff>"//cyan
colF2F = "<color=#f2f>"//magenta

//Main.lib
ERR_PRINT = function(str)
	print("<color=#FF2222><b> ERROR: </b></color>" + str)
end function
ERR_FATAL = function(str)
	exit("<color=#FF2222><b> ERROR_FATAL: </b></color>" + str)
end function
ERR_STRING = function(str)
	return("<color=#FF2222><b> ERROR: </b></color>" + str)
end function
dbg = function(str)//печатает "Debug: str"
	if flag_dbg then print("<color=#AAA><b>Debug:</b> <color=#FFF>" + str + "</color>")
end function
prmExist = function(s)//проверка существования параметра s в globals.params
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower == s.lower then return true
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			for ch in param
				if ch.lower == s.lower then return true
			end for
		end for
	return false
end function
prmTake = function(s)//проверка существования и удаление параметра s в globals.params
	substr = function(subs)
		for ch in subs
			if ch.lower == s.lower then return true
		end for
		return false
	end function
	if s[1]=="-" then//Ex: --dbg
		for param in params
			if param.lower == s.lower then
				params.remove(params.indexOf(s))
				return true
			end if
		end for
		return false
	else//Ex: -r from -lar
		if s.len>2 then ERR_PRINT("wrong format: "+s)
		s=s[1:]
		for param in params
			if param[0]!="-" or param.len<2 or param[1]=="-" then continue
			if substr(param) then
				indx=params.indexOf(param)
				globals.params[indx]=params[indx].remove(s)
				if params[indx].len<2 then params.remove(indx)
				return true
			end if
		end for
	return false
end function
fill = function(s, ln, side="s+", filler=" ")
	s = str(s)
	if s.len >= ln then return s
	filler = filler*ln
	if side=="s+" then return (s+filler)[:ln]
	if side=="+s" then return (filler+s)[-ln:]
end function
form = function(list)
	rv=""
	for l in list
		if typeof(l)=="string" then
			rv=rv+l
			continue
		end if
		p0=l[0]
		if l.len>1 then
			p1=l[1]
		else
			rv=rv+p0
			continue
		end if
		if l.len>2 then
			p2=l[2]
		else
			rv=rv+fill(p0,p1)
			continue
		end if
		if l.len>3 then
			p3=l[3]
		else
			rv=rv+fill(p0,p1,p2)
			continue
		end if
		rv=rv+fill(p0,p1,p2,p3)
	end for
	return rv
end function
connF = function(shell, ip, pass, port = 22, username = "root", type = "ssh")
	dbg("connF")
//	dbg(shell.host_computer.public_ip+" "+ip+" "+pass+" "+port+" "+username+" "+type)
	temp = shell.connect_service(ip.trim, port, username.trim, pass.trim , type.trim)
	if not temp then ERR_PRINT("connF: Not connected: " + temp)
//	if temp then dbg(temp.host_computer.public_ip)
	return temp
end function
connChain = function(shellList, oldShell)
  if not oldShell then oldShell = get_shell
  for i in range (0, SERVER_LIST.len-1, 2)
    newShell = connF(oldShell,shellList[i], shellList[i+1])
    if not newShell then ERR_FATAL("Connection failed")
  //  dbg(newShell.host_computer.public_ip+" "+newShell.host_computer.local_ip)
    oldShell = newShell
  end for
  return newShell
end function
choose = function(choices, default=-1)
	for i in range(0,choices.len-1)
		if i==0 then
			print("<color=#ff2><b>"+choices[i]+"</b>")
		else
			print("<color=#ff2><b>["+fill(i+"]", 4)+"</b><color=#fff>"+choices[i])
		end if
	end for
	prompt="> "
	if default>-1 then prompt="[default="+default+"] > "
	while 1
		user_choice = user_input("<color=#ff2>"+prompt+"<color=#fff>")
		if user_choice.len==0 and default>-1 then return default
		user_choice = user_choice.to_int
		if typeof(user_choice)=="number" and user_choice>0 and user_choice<choices.len then return user_choice
		print("<color=#ff2>Not a valid choice")
	end while
end function
chooseYesNo = function(default, prompt = "")
	if prompt.len>0 then print("<b>"+prompt+"</b>")
	if default then
		prompt = "y/n [Enter = Yes] > "
	else
		prompt = "y/n [Enter = No] > "
	end if
	while 1
		resp = user_input(prompt)
		if resp.len == 0 then return default
		if resp.lower[0] == "y" then return true
		if resp.lower[0] == "n" then return false
	end while
end function

includeLib = function(libName)//продвинутое включение либы
	paths = [current_path, "/lib", "/bin", "/usr/bin"]
	for i in paths
		lib = include_lib(i + "/" + libName)
		if lib then return lib
	end for
	ERR_PRINT("Library not found: " + libName)
	return false
end function


decipherF=function(host)//надо через fileRoot
	if params.len>0 and (params[0]=="--help" or params[0]=="-h") then
		print(colFFF+"decipher <file or md5>")
		return colFFF+"decipher"
	end if
	fileIN=host.File(params[0])
	fileOUT=host.File(params[1])
	for i in fileIN.get_content.split(char(10))
		if i=="" then continue
		l=i.split(":")
		acc=l[0]+":"+LibC.decipher(l[1])
		print(acc+endl)
		fileOUT.set_content(fileOUT.get_content+endl+acc)
		fileIN.set_content(fileIN.get_content.split(char(10))[1:].join(char(10)))
	end for
end function


//---Var---//
shell = get_shell
host = get_shell.host_computer
flag_dbg = false

//---Init---//
if prmTake("--dbg") or prmTake("--debug") then flag_dbg = true

//Fast DRM
if not get_router("IP_YOUR_DRM_SERVER").ping_port(1) then exit("Lars say NO")

LibC = includeLib("crypto.so")
// Main //

print(decipherF(get_shell.host_computer))
